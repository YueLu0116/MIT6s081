From b44cd475b3bcd608b499b46931d917f5de8ee5fa Mon Sep 17 00:00:00 2001
From: YueLu0116 <bit_drinkwater@163.com>
Date: Thu, 23 Jun 2022 01:13:18 +0800
Subject: [PATCH] lab locks: memory allocator

---
 .gitignore      |  3 ++-
 kernel/kalloc.c | 62 +++++++++++++++++++++++++++++++++++++++++--------
 kernel/param.h  |  2 +-
 3 files changed, 55 insertions(+), 12 deletions(-)

diff --git a/.gitignore b/.gitignore
index 3d25221..2dbbe31 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,4 +23,5 @@ submissions/
 ph
 barrier
 /lab-*.json
-.DS_Store
\ No newline at end of file
+.DS_Store
+.vscode
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..18f662b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,12 +21,27 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
-} kmem;
+} kmem[NCPU];
+
+char* kmem_lock_names[] = {  // for mbp with m1 pro
+  "kmem_cpu0",
+  "kmem_cpu1",
+  "kmem_cpu2",
+  "kmem_cpu3",
+  "kmem_cpu4",
+  "kmem_cpu5",
+  "kmem_cpu6",
+  "kmem_cpu7",
+  "kmem_cpu8",
+  "kmem_cpu9",
+};
 
 void
 kinit()
 {
-  initlock(&kmem.lock, "kmem");
+  for(int i=0;i<NCPU;i++){
+    initlock(&kmem[i].lock, kmem_lock_names[i]);
+  }
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -55,11 +70,15 @@ kfree(void *pa)
   memset(pa, 1, PGSIZE);
 
   r = (struct run*)pa;
+  push_off();
+
+  int cpu_id = cpuid();
+  acquire(&kmem[cpu_id].lock);
+  r->next = kmem[cpu_id].freelist;
+  kmem[cpu_id].freelist = r;
+  release(&kmem[cpu_id].lock);
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+  pop_off();
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -70,12 +89,35 @@ kalloc(void)
 {
   struct run *r;
 
-  acquire(&kmem.lock);
-  r = kmem.freelist;
+  push_off();
+
+  int cpu_id = cpuid();
+  acquire(&kmem[cpu_id].lock);
+
+  if(!kmem[cpu_id].freelist){
+    int steal_num = 64;
+    for(int i=0;i<NCPU;i++){
+      if(i == cpu_id) continue;
+      acquire(&kmem[i].lock);
+      struct run* rr = kmem[i].freelist;
+      while(rr && steal_num){
+        kmem[i].freelist = rr->next;
+        rr->next = kmem[cpu_id].freelist;
+        kmem[cpu_id].freelist = rr;
+        rr = kmem[i].freelist;
+        steal_num--;
+      }
+      release(&kmem[i].lock);
+      if(steal_num == 0) break;
+    }
+  }
+
+  r = kmem[cpu_id].freelist;
   if(r)
-    kmem.freelist = r->next;
-  release(&kmem.lock);
+    kmem[cpu_id].freelist = r->next;
+  release(&kmem[cpu_id].lock);
 
+  pop_off();
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
diff --git a/kernel/param.h b/kernel/param.h
index b5fdcb2..033d200 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,5 +1,5 @@
 #define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          10  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
-- 
2.36.1

