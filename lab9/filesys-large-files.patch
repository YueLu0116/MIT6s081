From bd87559b6d3bfc1c5d07cc1713e75e095d09a8ea Mon Sep 17 00:00:00 2001
From: YueLu0116 <bit_drinkwater@163.com>
Date: Sun, 19 Jun 2022 14:07:13 +0800
Subject: [PATCH] lab filesystem: large files

---
 .gitignore    |  3 ++-
 kernel/file.h |  2 +-
 kernel/fs.c   | 47 ++++++++++++++++++++++++++++++++++++++++++++++-
 kernel/fs.h   |  7 ++++---
 4 files changed, 53 insertions(+), 6 deletions(-)

diff --git a/.gitignore b/.gitignore
index 3d25221..2dbbe31 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,4 +23,5 @@ submissions/
 ph
 barrier
 /lab-*.json
-.DS_Store
\ No newline at end of file
+.DS_Store
+.vscode
diff --git a/kernel/file.h b/kernel/file.h
index b076d1d..43194bc 100644
--- a/kernel/file.h
+++ b/kernel/file.h
@@ -26,7 +26,7 @@ struct inode {
   short minor;
   short nlink;
   uint size;
-  uint addrs[NDIRECT+1];
+  uint addrs[NDIRECT+1+1];
 };
 
 // map major device number to device functions.
diff --git a/kernel/fs.c b/kernel/fs.c
index 40c9bd4..70f038b 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -377,7 +377,7 @@ iunlockput(struct inode *ip)
 static uint
 bmap(struct inode *ip, uint bn)
 {
-  uint addr, *a;
+  uint addr, *a, *b;
   struct buf *bp;
 
   if(bn < NDIRECT){
@@ -401,6 +401,31 @@ bmap(struct inode *ip, uint bn)
     return addr;
   }
 
+  bn -= NINDIRECT;
+  if(bn < NDOUINDIRECT){
+    if((addr = ip->addrs[NDIRECT+1]) == 0)
+      ip->addrs[NDIRECT+1] = addr = balloc(ip->dev);
+    
+    uint x = bn / NINDIRECT;  // 0~255
+    uint y = bn - x * NINDIRECT;
+
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[x]) == 0){
+      a[x] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+
+    bp = bread(ip->dev, addr);
+    b = (uint*)bp->data;
+    if((addr = b[y]) == 0){
+      b[y] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
   panic("bmap: out of range");
 }
 
@@ -432,6 +457,26 @@ itrunc(struct inode *ip)
     ip->addrs[NDIRECT] = 0;
   }
 
+  if(ip->addrs[NDIRECT+1]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT+1]);
+    a = (uint*)bp->data;
+    for(j=0;j<NINDIRECT;j++){
+      if(a[j]){
+        struct buf *tmp_bp = bread(ip->dev, a[j]);
+        uint *b = (uint*)tmp_bp->data;
+        for(int k=0; k<NINDIRECT;k++){
+          if(b[k])
+            bfree(ip->dev, b[k]);
+        }
+        brelse(tmp_bp);
+        bfree(ip->dev, a[j]);
+      }
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT+1]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
   ip->size = 0;
   iupdate(ip);
 }
diff --git a/kernel/fs.h b/kernel/fs.h
index 139dcc9..bb53668 100644
--- a/kernel/fs.h
+++ b/kernel/fs.h
@@ -24,9 +24,10 @@ struct superblock {
 
 #define FSMAGIC 0x10203040
 
-#define NDIRECT 12
+#define NDIRECT 11
 #define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
+#define NDOUINDIRECT ((NINDIRECT)*(NINDIRECT))
+#define MAXFILE (NDIRECT + NINDIRECT + NDOUINDIRECT)
 
 // On-disk inode structure
 struct dinode {
@@ -35,7 +36,7 @@ struct dinode {
   short minor;          // Minor device number (T_DEVICE only)
   short nlink;          // Number of links to inode in file system
   uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
+  uint addrs[NDIRECT+1+1];   // Data block addresses
 };
 
 // Inodes per block.
-- 
2.36.1

