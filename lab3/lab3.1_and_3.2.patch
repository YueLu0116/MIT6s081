From 87cfd851127b6db23dc95d04ace35dd0cf6e6738 Mon Sep 17 00:00:00 2001
From: YueLu0116 <bit_drinkwater@163.com>
Date: Sat, 23 Apr 2022 01:23:45 +0800
Subject: [PATCH] finish lab3.1 3.2

---
 kernel/defs.h      |  1 +
 kernel/exec.c      |  2 +-
 kernel/memlayout.h |  6 ++----
 kernel/proc.c      | 21 ++++++++++++++++++++-
 kernel/proc.h      |  1 +
 kernel/syscall.c   |  4 ----
 kernel/sysproc.c   |  3 ---
 kernel/vm.c        | 27 +++++++++++++++++++++++++++
 user/ulib.c        |  5 +----
 user/user.h        |  4 ++--
 10 files changed, 55 insertions(+), 19 deletions(-)

diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..b8ff11f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -154,6 +154,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+void            vmprint(pagetable_t pgtbl);
 void            kvminit(void);
 void            kvminithart(void);
 void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
diff --git a/kernel/exec.c b/kernel/exec.c
index d62d29d..477ba2e 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -115,7 +115,7 @@ exec(char *path, char **argv)
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
-
+  vmprint(p->pagetable);
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 74d2fd4..7f00134 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -16,7 +16,7 @@
 // 80000000 -- entry.S, then kernel text and data
 // end -- start of kernel page allocation area
 // PHYSTOP -- end RAM used by the kernel
-
+ 
 // qemu puts UART registers here in physical memory.
 #define UART0 0x10000000L
 #define UART0_IRQ 10
@@ -70,10 +70,8 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
-#ifdef LAB_PGTBL
-#define USYSCALL (TRAPFRAME - PGSIZE)
 
+#define USYSCALL (TRAPFRAME - PGSIZE)
 struct usyscall {
   int pid;  // Process ID
 };
-#endif
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..694dac0 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -126,6 +126,13 @@ found:
     release(&p->lock);
     return 0;
   }
+  
+  // Allocate a shared page
+  if((p->ucall = (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
@@ -140,7 +147,7 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->ucall->pid = p->pid;
   return p;
 }
 
@@ -153,6 +160,9 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  if(p->ucall)
+    kfree((void*)p->ucall);
+  p->ucall = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -196,6 +206,14 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  // map one read-only page at USYSCALL
+  if(mappages(pagetable, USYSCALL, PGSIZE,
+              (uint64)(p->ucall), PTE_R | PTE_U) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    uvmfree(pagetable, 0);
+    return 0;
+  }
   return pagetable;
 }
 
@@ -206,6 +224,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..87fbc77 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,5 +104,6 @@ struct proc {
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
+  struct usyscall *ucall;       
   char name[16];               // Process name (debugging)
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index a857380..a83a8ba 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -107,9 +107,7 @@ extern uint64 sys_uptime(void);
 #ifdef LAB_NET
 extern uint64 sys_connect(void);
 #endif
-#ifdef LAB_PGTBL
 extern uint64 sys_pgaccess(void);
-#endif
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -136,9 +134,7 @@ static uint64 (*syscalls[])(void) = {
 #ifdef LAB_NET
 [SYS_connect] sys_connect,
 #endif
-#ifdef LAB_PGTBL
 [SYS_pgaccess] sys_pgaccess,
-#endif
 };
 
 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3bd0007..f516e0d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -75,15 +75,12 @@ sys_sleep(void)
   return 0;
 }
 
-
-#ifdef LAB_PGTBL
 int
 sys_pgaccess(void)
 {
   // lab pgtbl: your code here.
   return 0;
 }
-#endif
 
 uint64
 sys_kill(void)
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..683e8e9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,33 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+void 
+vmprint_helper(pagetable_t pagetable, int depth)
+{
+  for(int i=0; i<512; i++){
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+        
+      printf("..");
+      for(int j=0;j<depth;j++){
+        printf(" ..");
+      }
+      uint64 child = PTE2PA(pte);
+      printf("%d: pte %p pa %p\n", i, pte, child);
+      if((pte & (PTE_R|PTE_W|PTE_X)) == 0){
+        vmprint_helper((pagetable_t)child, depth+1);
+      }
+    }
+  }
+}
+
+void
+vmprint(pagetable_t pagetable)
+{
+    printf("page table %p\n", pagetable);
+    vmprint_helper(pagetable, 0);
+}
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
diff --git a/user/ulib.c b/user/ulib.c
index b43140c..8c83f89 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -1,10 +1,8 @@
 #include "kernel/types.h"
 #include "kernel/stat.h"
 #include "kernel/fcntl.h"
-#ifdef LAB_PGTBL
 #include "kernel/riscv.h"
 #include "kernel/memlayout.h"
-#endif
 #include "user/user.h"
 
 
@@ -141,11 +139,10 @@ memcpy(void *dst, const void *src, uint n)
   return memmove(dst, src, n);
 }
 
-#ifdef LAB_PGTBL
 int
 ugetpid(void)
 {
   struct usyscall *u = (struct usyscall *)USYSCALL;
   return u->pid;
 }
-#endif
+
diff --git a/user/user.h b/user/user.h
index 8aed44e..4113f35 100644
--- a/user/user.h
+++ b/user/user.h
@@ -27,11 +27,11 @@ int uptime(void);
 #ifdef LAB_NET
 int connect(uint32, uint16, uint16);
 #endif
-#ifdef LAB_PGTBL
+
 int pgaccess(void *base, int len, void *mask);
 // usyscall region
 int ugetpid(void);
-#endif
+
 
 // ulib.c
 int stat(const char*, struct stat*);
-- 
2.34.1

